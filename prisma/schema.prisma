datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  isVerifiedRunner Boolean @default(false)
  achievements   Achievement[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  verificationRequests VerificationRequest[]

  @@map("users")
}

model Race {
  raceId          String   @id
  name            String
  location        String
  date            DateTime
  distance        Float    @default(0) // 距离（公里）
  elevation       Float    @default(0) // 海拔变化（米）
  terrain         Terrain  @default(ROAD)
  technicalLevel  Int      @default(1)
  raceGrade       String
  raceItems       String[]
  raceScale       String
  source          String
  sourceUrl       String
  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())
  
  reviews         Review[]
  weatherHistory  WeatherHistory[]

  @@map("races")
}

model WeatherHistory {
  id          String   @id @default(cuid())
  raceId      String
  date        DateTime
  temperature Float
  humidity    Int
  windSpeed   Float
  conditions  String
  rainfall    Float?
  visibility  Float?
  pressure    Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  race        Race     @relation(fields: [raceId], references: [raceId], onDelete: Cascade)

  @@map("weather_history")
  @@unique([raceId, date])
}

model Review {
  id            String   @id @default(cuid())
  raceId        String
  userId        String
  rating        Float
  title         String
  content       String
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  race          Race     @relation(fields: [raceId], references: [raceId], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Achievement {
  id        String   @id @default(cuid())
  userId    String
  type      String
  date      DateTime
  metadata  Json?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model VerificationRequest {
  id          String   @id @default(cuid())
  userId      String
  realName    String
  idNumber    String
  raceResults Json
  socialMedia Json?
  status      VerificationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_requests")
}

// NextAuth.js 相关模型
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
}

enum Terrain {
  ROAD
  TRAIL
  MIXED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model ScraperLog {
  id            String    @id @default(cuid())
  source        String
  totalRaces    Int?
  successCount  Int?
  failedCount   Int?
  newRaces      Int?
  updatedRaces  Int?
  status        String
  error         String?
  createdAt     DateTime  @default(now())

  @@map("scraper_logs")
}